service: ProjectCapstone

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin


provider:
  stackName: ProjectCapstone
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'


  stage: ${opt:stage, 'dev'}

  region: ${opt:region, 'us-east-1'}


  tracing:
    lambda: true
    apiGateway: true

  environment:
    VIDEOS_TABLE: Videos-${self:provider.stage}
    VIDEOS_CREATED_AT_INDEX: VideosCreatedAtIndex
    PUBLIC_INDEX: VideosPublicGSIAldit
    VIDEOS_S3_BUCKET: videos-aldit-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Serverless Videos API
        description: Serverless application for Videos

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetVideos:
    handler: src/lambda/http/getVideos.handler
    events:
      - http:
          method: get
          path: videos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.VIDEOS_CREATED_AT_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}/index/${self:provider.environment.PUBLIC_INDEX}
  
  CreateVideo:
    handler: src/lambda/http/createVideo.handler
    events:
      - http:
          method: post
          path: videos
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-video-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}

  UpdateVideo:
    handler: src/lambda/http/updateVideo.handler
    events:
      - http:
          method: patch
          path: videos/{videoId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/update-video-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}

  DeleteVideo:
    handler: src/lambda/http/deleteVideo.handler
    events:
      - http:
          method: delete
          path: videos/{videoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
  
  UploadVideo:
    handler: src/lambda/http/uploadVideo.handler
    events:
      - http:
          method: post
          path: videos/{videoId}/upload
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.VIDEOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*
  

resources:
  Resources:
    
    VideosDynamoDb:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: videoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: publicVideo
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: videoId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.VIDEOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PUBLIC_INDEX}
            KeySchema:
            - AttributeName: publicVideo
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.VIDEOS_TABLE}

      
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: ApiGatewayRestApi

    VideosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.VIDEOS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD 
              AllowedOrigins:
              - '*'
              AllowedHeaders:
              - '*'
              MaxAge: 3000
    
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument: 
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.VIDEOS_S3_BUCKET}/*'
        Bucket: 
          Ref: VideosBucket